load('preSCRuB_SPARSEDOSSA_generators.Rdata')
library(SparseDOSSA2)
library(tidyverse)
library(SparseDOSSA2)
library(pwr)
powers <- c()
# sample_size <- 300
mm <- c()
sds <- c()
s1 <- c()
s2 <- c()
# n_samps <- 300
# samps1 <-  225
# samps2 <-  75
n_iters <- 100
n_feats <- 20
cases <- list(
# c(389, 389),
# c(389, 467),
# c(75,703),
# c(75, 314),
# c(79, 79),
# c(42,42)
# c(389,778)
# c(225,75)
# c(125,78),
# c(20,78)
c(479,479)
)
for(j in 1:length(cases)){
case <- cases[[j]]
print(case)
samps1 <- case[1]
samps2 <- case[2]
for( pow_level in c(0.8, 0.9)){
mean_effect <- c()
for(i in 1:n_iters){
samples <- SparseDOSSA2(template = fitted_sparsedossa_vag_samples,
n_sample=n_samps,
n_feature = n_feats ,
median_read_depth = 10000,
verbose = F)$simulated_data %>% t()
test_inds <-  sample.int(n_feats, size= 10, replace=F)
effect <- rep(0, n_feats)
effect[test_inds] <- 1 / length(test_inds)
val <- samples[, test_inds] %>%
colMeans() %>%
mean()
h <- pwr.2p2n.test(n1=samps1, n2=samps2, sig.level=5e-4, power=pow_level, alternative='less')$h
range <- seq(val, 1, 1e-6)
tmp1 <-  ( ES.h(
val,
range
) + abs(h)  ) %>% abs()
mean_effect <- c(mean_effect,  range[ which(tmp1==min(tmp1)) ] - val )
# power.prop.test( n = samps1,
#                  p1=val,
#                  sig.level=5e-4,
#                  power=pow_level, alternative='one.sided')$p2
#
#   mean_effect <- c(mean_effect, samples[, test_inds] %>%
#                                       colMeans() %>%
#                                       mean() %>%
#                      sapply(function(x) power.prop.test( n = smp_size, #c(samps1, samps2),#sample_size,
#                                                 p1=x,
#                                                 sig.level=5e-4,
#                                                 power=pow_level, alternative='one.sided')$p2 - x)
#                     )
}
mm <- c(mm, mean(mean_effect))
sds <- c(sds, sd(mean_effect))
powers <- c( powers, pow_level)
s1 <- c(s1, samps1)
s2<- c(s2, samps2)
}
}
powers <- c()
# sample_size <- 300
mm <- c()
sds <- c()
s1 <- c()
s2 <- c()
# n_samps <- 300
# samps1 <-  225
# samps2 <-  75
n_iters <- 100
n_feats <- 20
cases <- list(
# c(389, 389),
# c(389, 467),
# c(75,703),
# c(75, 314),
# c(79, 79),
# c(42,42)
# c(389,778)
# c(225,75)
# c(125,78),
# c(20,78)
c(479,479)
)
for(j in 1:length(cases)){
case <- cases[[j]]
print(case)
samps1 <- case[1]
samps2 <- case[2]
n_samps <- samps1 + samps2
for( pow_level in c(0.8, 0.9)){
mean_effect <- c()
for(i in 1:n_iters){
samples <- SparseDOSSA2(template = fitted_sparsedossa_vag_samples,
n_sample=n_samps,
n_feature = n_feats ,
median_read_depth = 10000,
verbose = F)$simulated_data %>% t()
test_inds <-  sample.int(n_feats, size= 10, replace=F)
effect <- rep(0, n_feats)
effect[test_inds] <- 1 / length(test_inds)
val <- samples[, test_inds] %>%
colMeans() %>%
mean()
h <- pwr.2p2n.test(n1=samps1, n2=samps2, sig.level=5e-4, power=pow_level, alternative='less')$h
range <- seq(val, 1, 1e-6)
tmp1 <-  ( ES.h(
val,
range
) + abs(h)  ) %>% abs()
mean_effect <- c(mean_effect,  range[ which(tmp1==min(tmp1)) ] - val )
# power.prop.test( n = samps1,
#                  p1=val,
#                  sig.level=5e-4,
#                  power=pow_level, alternative='one.sided')$p2
#
#   mean_effect <- c(mean_effect, samples[, test_inds] %>%
#                                       colMeans() %>%
#                                       mean() %>%
#                      sapply(function(x) power.prop.test( n = smp_size, #c(samps1, samps2),#sample_size,
#                                                 p1=x,
#                                                 sig.level=5e-4,
#                                                 power=pow_level, alternative='one.sided')$p2 - x)
#                     )
}
mm <- c(mm, mean(mean_effect))
sds <- c(sds, sd(mean_effect))
powers <- c( powers, pow_level)
s1 <- c(s1, samps1)
s2<- c(s2, samps2)
}
}
data.frame( mean_effect=mm,
stdv=sds,
powers=powers,
samp_size1=s1,
samp_size2=s2)
?rnorm
rnorm(20, samps1+samps2)
rnorm(n = 20 * ( samps1+samps2 ) )
rnorm(n = 20 * ( samps1+samps2 ) ) %>% dim
rnorm(n = 20 * ( samps1+samps2 ) ) %>% length
rnorm(n = 20 * ( samps1+samps2 ) ) %>% as.matrix(20, samps1+samps2 )
rnorm(n = 20 * ( samps1+samps2 ) ) %>% matrix(20, samps1+samps2 )
dim(v1)
v1 <- rnorm(n = 20 * ( samps1+samps2 ) ) %>% matrix(20, samps1+samps2 )
dim(v1)
?pwr.2p2n.test
pwr.2p2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.8,
alternative="two.sided"
)
pwr.2p2n.test(n1=479,
n2=479,
sig.level=0.05/20, ## correction
power=0.8,
alternative="two.sided"
)
pwr.2p2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.9,
alternative="two.sided"
)
pwr.2p2n.test(n1=479,
n2=479,
sig.level=0.05/20, ## correction
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05/20, ## correction
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.8,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05/20, ## correction
power=0.8,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05,
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05/20, ## correction
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05/(20*100), ## correction
power=0.9,
alternative="two.sided"
)
pwr.t2n.test(n1=479,
n2=479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
?pwr.r.test
install.packages('genefu')
BiocManager::install("genefu")
library(genefu)
?power.cor
?pwr.anova.test
pwr.anova.test(n1=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
?pwr.r.test
pwr.r.test(k=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(10*50), ## correction
power=0.8,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*100), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*1-0), ## correction
power=0.8,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*100), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*100), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*100), ## correction
power=0.9,
alternative="two.sided"
)
pwr.r.test(n=479 + 479,
sig.level=0.05/(20*100), ## correction
power=0.8,
alternative="two.sided"
)
??sva
for(NN in c(396, 479, 875)){
pwr.r.test(n = NN + NN,
sig.level=0.05/(20*100), ## correction
power=0.8,
alternative="two.sided"
)
}
for(NN in c(396, 479, 875)){
print(
pwr.r.test(n = NN + NN,
sig.level=0.05/(20*100), ## correction
power=0.8,
alternative="two.sided"
)
)
}
for(NN in c(80, 396, 479, 875)){
print(
pwr.r.test(n = NN + NN,
sig.level=0.05/(20*100), ## correction
power=0.8,
alternative="two.sided"
)
)
}
getwd()
setwd('../../DEBIAS-M-revisions/new-cervix-carcinoma/')
set.seed(42)
data <- read.csv('tmp-datasets-for-R/data.csv', row.names=1)
md <- read.csv('tmp-datasets-for-R/md.csv', row.names=1)
