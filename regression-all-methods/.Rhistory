row.names( df ) <- row.names( md )
train_nm='HSRR_JR003_mm_corrected'
train_inds <- which( md$Study == train_nm )
metab %>% head(1) %>% write.csv('metab-R-column-names.csv')
getwd()
setwd('Desktop/DEBIAS-M-revisions/v1-DEBIAS-M-Analysis/')
data <- read.csv('tmp/data.csv', row.names=1)
md <- read.csv('tmp/metadata.csv')
md %>% head()
library(tidyverse)
md %>% head()
getwd()
## MMUPHin
md[, 'mmup_batch'] <- as.factor(md$Study)
mmup_out <- MMUPHin::adjust_batch(t(data),
'mmup_batch',
data=md,
covariates=md$label
)
data <- read.csv('tmp/data.csv', row.names=1)
md <- read.csv('tmp/metadata.csv')
row.names(md) <- row.names(data)
data <- data [ , which( ( data > 0 ) %>% colSums > 2 ) ]
## MMUPHin
md[, 'mmup_batch'] <- as.factor(md$Study)
mmup_out <- MMUPHin::adjust_batch(t(data),
'mmup_batch',
data=md,
covariates=md$label
)
mmup_out <- MMUPHin::adjust_batch(t(data),
'mmup_batch',
data=md,
covariates=md$label=='True'
)
mmup_out <- MMUPHin::adjust_batch(t(data),
'mmup_batch',
data=md,
covariates=as.factor( md$label )
)
mmup_out <- MMUPHin::adjust_batch(t(data),
'mmup_batch',
data=md,
covariates=c('label')
)
t(mmup_out$feature_abd_adj) %>% write.csv('../data/CRC_with_labels/MMUPHin_out.csv')
suppressMessages({library(PLSDAbatch, quietly=TRUE)})
getwd()
setwd('../../sandbox/addressing-SCRuB-issues/manually-specify-leakers/')
n_feats_considered=100 # to avoid memory errors on GHA
data <- (read.csv( paste0( test_path(), '/plasma_data.csv'), row.names=1) %>% as.matrix() )[,1:n_feats_considered]
metadata <- read.csv( paste0( test_path(), '/plasma_metadata.csv'), row.names=1)
n_feats_considered=100 # to avoid memory errors on GHA
data <- (read.csv( paste0( 'SCRuB/tests/testthat', '/plasma_data.csv'), row.names=1) %>% as.matrix() )[,1:n_feats_considered]
metadata <- read.csv( paste0( 'SCRuB/tests/testthat', '/plasma_metadata.csv'), row.names=1)
dim(data)
dim(metadata)
metadata %>% head()
metadata
metadata %>% filer(is_control) %>% row.names()
metadata %>% filter(is_control) %>% row.names()
metadata %>% filter(~is_control) %>% row.names()
metadata %>% filter(is_control==F) %>% row.names()
knitr::opts_chunk$set(echo = TRUE)
df %>% head()
data %>% head()
data[1:5, 1:5]
md[1:5, 1:5]
data[1:5, 1:5]
metadata[1:5, 1:5]
metadata[1:5,]
metadata %>% filter(is_control)
metadata %>% filter(is_control) %>% row.names
metadata %>% filter(is_control == F)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(n=2)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
metadata %>% filter(is_control) %>% row.names
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
metadata %>% filter(is_control == F) %>% row.names() %>% sample(2)
control_leakers <- list()
control_leakers['12692.Control.1'] <- c("12667.X3097210",
"12667.X2342267")
control_leakers["12691.Control.44"] <- c( "12667.X2056691",
"12691.PC14")
control_leakers
control_leakers[["12692.Control.1"]]
control_leakers <- list()
control_leakers['12692.Control.1'] <- c("12667.X3097210",
"12667.X2342267")
control_leakers["12691.Control.44"] <- c( "12667.X2056691",
"12691.PC14")
control_leakers[["12692.Control.1"]]
control_leakers <- list()
control_leakers['12692.Control.1'] <- list("12667.X3097210",
"12667.X2342267")
control_leakers["12691.Control.44"] <- c("12667.X2056691",
"12691.PC14")
control_leakers[["12692.Control.1"]]
control_leakers[["12692.Control.1"]]
control_leakers <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14")
)
control_leakers[["12692.Control.1"]]
control_leakers
nsamples <- sum( md$is_contorl==F)
msamples
nsamples
nsamples <- sum( md$is_control==F)
nsamples
nsamples <-  (metadata$is_control==F)
nsamples
nsamples <-  (metadata$is_control==F) %>% sum
nsamples
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum,
ncol = (metadata$is_control==F) %>% sum
)
well_dists
?matrix
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum,
ncol = (metadata$is_control==F) %>% sum,
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names,
)
)
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum,
ncol = (metadata$is_control==F) %>% sum,
# dimnames = list( metadata %>% filter(is_control) %>% row.names,
#                  metadata %>% filter(is_control==F) %>% row.names,
#                  )
)
well_dists
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum,
ncol = (metadata$is_control==F) %>% sum,
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names,
)
)
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names,
)
)
etadata %>% filter(is_control) %>% row.names
metadata %>% filter(is_control) %>% row.names
metadata %>% filter(is_control==F) %>% row.names
metadata %>% filter(is_control) %>% row.names
dimnames(well_dists) <- list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names,
)
dimnames(well_dists) <- list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 0,
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
# dimnames(well_dists) <- list( metadata %>% filter(is_control) %>% row.names,
#      metadata %>% filter(is_control==F) %>% row.names
#      )
well_dists
well_dists[1:5, 1:5]
manual_leaker_override
manual_leaker_override <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14")
)
control_leakers
for( a in manual_leaker_override) print(a)
for( a in names(manual_leaker_override) print(a)
names(manual_leaker_override
names(manual_leaker_override
names(manual_leaker_override)
for( a in names(manual_leaker_override) ) print(a)
for( b in manual_leaker_override[[a]] print(b) )
}
for( a in names(manual_leaker_override) ){
for( b in manual_leaker_override[[a]] )print(b)
}
# names(manual_leaker_override)
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 10,
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
well_dists[1:5, 1:5]
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 10, ## really just need a large engouh number
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
for( a in names(manual_leaker_override) ){
for( b in manual_leaker_override[[a]] )print(b)
well_dists[a, b] <- 1
}
well_dists[1:5, 1:5]
well_dists[1:5,5:15]
well_dists %>% rowSums
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 10, ## really just need a large engouh number
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
## loop through the list to 'gate in' the specified sample-control pairs
for( a in names(manual_leaker_override) ){
for( b in manual_leaker_override[[a]] )
well_dists[a, b] <- 1
}
well_dists %>% rowSums
control_order <- metadata[metadata[,1]==T, 2 ] %>% unique() %>% as.character()
control_mat <- control_order %>%
sapply( function(x) metadata[,2] == x ) %>% as.matrix()
control_mat
# control_mat
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
scr_out <- SCRuB::SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
getwd()
source('SCRuB/R/SCRuB.R')
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
source('SCRuB/R/spatial_functions.R')
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
source('SCRuB/R/lsq_initializations.R')
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
import(rlang)
import(tidyverse)
import(torch)
importFrom(dplyr,"%>%")
importFrom(dplyr,count)
importFrom(dplyr,filter)
importFrom(dplyr,mutate)
importFrom(dplyr,select)
importFrom(glmnet,glmnet)
importFrom(graphics,hist)
importFrom(magrittr,"%<>%")
importFrom(stats,dist)
importFrom(stats,model.matrix)
importFrom(biomformat, read_biom)
importFrom(biomformat, biom_data)
# import(rlang)
# import(tidyverse)
# import(torch)
library(glmnet)
library(rlang)
library(torch)
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
source('SCRuB/R/main_functions.R')
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, -1]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 350]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 355]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 353]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 352]
scr_out$inner_iterations$`control blank library prep`$alpha[, 352]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[scr_out$inner_iterations$`control blank DNA extraction`$alpha!=0]
scr_out$inner_iterations$`control blank library prep`$alpha[scr_out$inner_iterations$`control blank library prep`$alpha!=0]
manual_leaker_override <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14",
"12667.X3097210"
"12667.X2342267")
manual_leaker_override <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14",
"12667.X3097210",
"12667.X2342267")
)
control_leakers
control_leakers
manual_leaker_override <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14",
"12667.X3097210",
"12667.X2342267")
)
manual_leaker_override
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 10, ## really just need a large engouh number
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
## loop through the list to 'gate in' the specified sample-control pairs
for( a in names(manual_leaker_override) ){
for( b in manual_leaker_override[[a]] )
well_dists[a, b] <- 1
}
well_dists %>% rowSums
control_order <- metadata[metadata[,1]==T, 2 ] %>% unique() %>% as.character()
control_mat <- control_order %>%
sapply( function(x) metadata[,2] == x ) %>% as.matrix()
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
scr_out$inner_iterations$`control blank library prep`$alpha[scr_out$inner_iterations$`control blank library prep`$alpha!=0]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[scr_out$inner_iterations$`control blank DNA extraction`$alpha!=0]
scr_out$inner_iterations$`control blank library prep`$alpha[, 352]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 352]
scr_out$inner_iterations$`control blank library prep`$alpha[1,]
metadata %>% filter(is_control==F)
metadata %>% filter(is_control==F) %>% row.names() %>% sample(4)
manual_leaker_override <- list('12692.Control.1'=c("12667.X3097210",
"12667.X2342267"),
"12691.Control.44"=c("12667.X2056691",
"12691.PC14",
"12667.X3097210",
"12667.X2342267",
"12667.X2070791" ,
"12692.Control.29",
"12667.X2105130",
"12692.150178" )
)
manual_leaker_override
## manually create the distance matrix using the provided list
well_dists <- matrix(data = 10, ## really just need a large engouh number
nrow = (metadata$is_control) %>% sum(),
ncol = (metadata$is_control==F) %>% sum(),
dimnames = list( metadata %>% filter(is_control) %>% row.names,
metadata %>% filter(is_control==F) %>% row.names
)
)
## loop through the list to 'gate in' the specified sample-control pairs
for( a in names(manual_leaker_override) ){
for( b in manual_leaker_override[[a]] )
well_dists[a, b] <- 1
}
control_order <- metadata[metadata[,1]==T, 2 ] %>% unique() %>% as.character()
control_mat <- control_order %>%
sapply( function(x) metadata[,2] == x ) %>% as.matrix()
scr_out <- SCRuB_wrapper(data,
control_mat,
well_dists,
dist_threshold=1.5,
verbose=F
)
scr_out$inner_iterations$`control blank library prep`$alpha[, 352]
scr_out$inner_iterations$`control blank DNA extraction`$alpha[, 352]
scr_out$inner_iterations$`control blank library prep`$alpha[scr_out$inner_iterations$`control blank library prep`$alpha!=0]
is.na(manual_leaker_override)
min(is.na(manual_leaker_override))==0
is.list(manual_leaker_override)
li.list(NA)
is.list(NA)
if( T or F) print(5)
if( TRUE ){print(5)}
if( TRUE or FALSE ){print(5)}
if( (TRUE) or (FALSE) ){print(5)}
if( (TRUE)or(FALSE) ){print(5)}
if( (TRUE)|(FALSE) ){print(5)}
devtools::install('SCRuB/')
devtools::install('SCRuB/')
testthat::test_local('SCRuB/')
data %>% rowSums() == 0
devtools::install('SCRuB/')
testthat::test_local('SCRuB/')
devtools::install('SCRuB/')
testthat::test_local('SCRuB/')
getwd()
setwd('../../../DEBIAS-M-revisions/regression-all-methods/')
set.seed(42)
data <- read.csv('tmp-datasets-for-R/data.csv', row.names=1)
md <- read.csv('tmp-datasets-for-R/md.csv', row.names=1)
md$Covariate <- md$label
suppressMessages({library(PLSDAbatch, quietly=TRUE)})
knitr::opts_chunk$set(echo = TRUE)
getwd()
getwd()
md <- read.csv('../../New-vaginal-project/numom_preeclampsia/code/immune-factor-associations/md_110.csv', row.names=1)
lum <- read.csv('../../New-vaginal-project/numom_preeclampsia/code/immune-factor-associations/temp_lum.csv', row.names=1)
library(tidyverse)
library(vegan)
library(tidyverse)
library(vegan)
vegan::adonis(lum ~ Age_at_v1 + CRite + Site + PEC_case, data = md, method='euclidean')
vegan::adonis(lum ~ age_at_v1 + CRite + Site + PEC_case, data = md, method='euclidean')
md %>% colnames
vegan::adonis(lum ~ Age_at_V1 + CRite + Site + PEC_case, data = md, method='euclidean')
vegan::adonis(lum ~ Age_at_V1 + Crace + Site + PEC_case, data = md, method='euclidean')
md %>% colnames
vegan::adonis(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq <- vegan::adonis(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq$coefficients
qq$aov.tab
qq <- vegan::adonis2(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq$aov.tab
qq$Df
qq$R2
qq
qq <- vegan::adonis2(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~  Age_at_V1 + CRace + Site + PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
set.see(1)
set.seed(1)
qq <- vegan::adonis2(lum ~ PEC_case + Age_at_V1 + CRace + Site, data = md, method='euclidean')
qq
set.seed(1)
qq <- vegan::adonis2(lum ~ PEC_case, data = md, method='euclidean')
qq
